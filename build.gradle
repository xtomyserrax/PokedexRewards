buildscript {

    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            url = "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT"
        classpath "gradle.plugin.org.spongepowered:spongegradle:0.6"
    }
}

ext.spongeApiVersion = "${project.spongeAPIVersion}"

apply plugin: "net.minecraftforge.gradle.forge"
apply plugin: "org.spongepowered.plugin"

version = "0.8.2"
group = modGroup
archivesBaseName = modBaseName

// Enables use of the section character (ยง) instead of long tags. Thanks, Hiroku!
//noinspection GroovyAssignabilityCheck
tasks.withType(JavaCompile)
{
    task ->
    task.options.encoding = 'UTF-8'
    task.options.fork = true
}

minecraft {
    version = project.forgeVersion
    runDir = "run"

    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = project.mcpVersion
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}

repositories {
    mavenCentral()
    maven {
        name = 'sponge'
        url = 'https://repo.spongepowered.org/maven'
    }
    ivy {
        url "http://download.nodecdn.net/containers/reforged/server/release"
        layout "pattern", {
            artifact "[organisation]/[revision]/[artifact].[ext]"
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

// Allows Sponge and Pixelmon stuff to load up correctly.
dependencies
{
    // Grab and include Sponge.
    compileOnly 'org.spongepowered:spongeapi:7.1.0'

    // Automatically grabs libraries from the libs folder and adds them to the project. Thanks, CraftSteamG!
    compileOnly fileTree(dir: 'libs', include: ['*.jar'])
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"

        // replace version and mcversion
        expand "version": project.version, "mcversion": project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
}
